<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>â€“ Getting Started with a Trial Account</title><link>https://docs.trustgrid.io/getting-started/trial/</link><description>Recent content in Getting Started with a Trial Account on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://docs.trustgrid.io/getting-started/trial/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting-Started: Request Trustgrid Trial Account</title><link>https://docs.trustgrid.io/getting-started/trial/request-trial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.trustgrid.io/getting-started/trial/request-trial/</guid><description>
&lt;p>The process below will guide you through requesting a free trial account.&lt;/p>
&lt;h2 id="high-level-steps">High-Level Steps&lt;/h2>
&lt;ul>
&lt;li>Sign up for a Trustgrid trial account&lt;/li>
&lt;li>Verify email&lt;/li>
&lt;li>Sign in&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Email address&lt;/li>
&lt;li>Chrome-based browser&lt;/li>
&lt;/ul>
&lt;h2 id="step-1---create-a-trustgrid-account">Step 1 - Create a Trustgrid account&lt;/h2>
&lt;ol>
&lt;li>Using Chrome or a similar browser navigate to &lt;a href="https://portal.trustgrid.io/">https://portal.trustgrid.io/&lt;/a>&lt;/li>
&lt;li>Click the link at the bottom of the page to &amp;ldquo;Start a free trial&amp;rdquo;
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="start-trial.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 70%;">
&lt;/figure>
&lt;/li>
&lt;li>Provide the requested information. Note that the account will be created based on the provided Company Name.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="sign-up-form.png" alt="Sign up form" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 50%;">
&lt;/figure>
&lt;/li>
&lt;li>A verification email will be sent to the provided address.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="email-verify.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 50%;">
&lt;/figure>
&lt;/li>
&lt;li>Check your email inbox for the verification email from Trustgrid. It may be in your spam folder. Click the link to verify your email address.&lt;/li>
&lt;li>You will be redirected to the login page. Sign in using the credentials you provided during sign-up.&lt;/li>
&lt;li>Upon login, you will be required to configure one-time password multifactor authentication (MFA). Use an app such as Google Authenticator or Authy to scan the QR code. Enter the returned one-time password when prompted.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="mfa-setup.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 40%;">
&lt;/figure>
&lt;/li>
&lt;li>You will be returned to the sign-in page to complete your login. Enter your email, password, and the one-time password from your authentication app.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="final-signin.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 40%;">
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;p>Note: If you are not automatically redirected back to the Trustgrid portal just click the Portal link in the top right.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="auth-portal-link.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 35%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Link back to Portal
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="step-2---choose-a-domain">Step 2 - Choose a domain&lt;/h2>
&lt;p>All Trustgrid accounts have a base domain that is used to create fully qualified domain names (FQDN) for resources such as nodes and clusters.&lt;/p>
&lt;ol>
&lt;li>On initial login, you will be prompted to provide the subdomain for your FQDN. This will be appended with &lt;code>.trustgrid.io&lt;/code> automatically.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="domain-setup.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 85%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Prompt to create account domain
&lt;/figcaption>
&lt;/figure>
&lt;ul>
&lt;li>This name must be unique among all Trustgrid customers, if you choose a domain name that is already taken you will be prompted to choose another.&lt;/li>
&lt;li>The subdomain can only consist of lower-case letters, numbers, and hyphens(&lt;code>-&lt;/code>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="alert alert-warning" role="alert">
Once created the domain cannot be changed. Please choose carefully.
&lt;/div>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>You now have access to the Trustgrid portal and can begin &lt;a href="https://docs.trustgrid.io/getting-started/trial/base-setup">installing agents&lt;/a>.&lt;/p></description></item><item><title>Getting-Started: Initial Agent Setup</title><link>https://docs.trustgrid.io/getting-started/trial/base-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.trustgrid.io/getting-started/trial/base-setup/</guid><description>
&lt;p>In this section, we will cover the initial setup of two Trustgrid agents on separate Ubuntu hosts to demonstrate communication across a Trustgrid virtual network. Examples where this could be useful in the real world include:&lt;/p>
&lt;ul>
&lt;li>Enabling an application server secure access to a data source on a remote server&lt;/li>
&lt;li>Enabling a server the ability to connect via SSH to one or more remote servers without exposing any ports to the internet&lt;/li>
&lt;/ul>
&lt;h2 id="high-level-steps">High-Level Steps&lt;/h2>
&lt;ul>
&lt;li>Deploy two Trustgrid agents&lt;/li>
&lt;li>Initiate ping between devices&lt;/li>
&lt;li>Utilize tools to monitor traffic passing between agents&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.trustgrid.io/getting-started/trial/request-trial/">Trustgrid Trial Account&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.trustgrid.io/getting-started/trial/base-setup/ubuntu2204/">Two instances of Ubuntu 22.04&lt;/a> with &lt;code>sudo&lt;/code> privileges to install additional repositories and packages.
&lt;ul>
&lt;li>Both instances need to be able to make &lt;strong>outbound connections to the internet on ports 443 and 8443&lt;/strong> and cannot be subject to TLS inspection that alters the certificate chain.&lt;/li>
&lt;li>Ideally, these devices should not be able to communicate with each other directly. This is not a hard requirement.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="understanding-the-default-network">Understanding the Default Network&lt;/h2>
&lt;p>To facilitate a smooth trial a default &lt;a href="https://docs.trustgrid.io/getting-started/basic-architecture/#virtual-networks">virtual network&lt;/a> is created. This network uses the carrier-grade NAT address space 100.64.0.0/10 as an &lt;a href="">IP Pool&lt;/a>. Agents are automatically assigned an IP address from this pool when they are attached to the virtual network and routes are automatically created to allow communication between agents on the same virtual network.&lt;/p>
&lt;h2 id="step-1---setup-agents">Step 1 - Setup Agents&lt;/h2>
&lt;h3 id="install-first-agent">Install First Agent&lt;/h3>
&lt;ol>
&lt;li>From the &lt;a href="https://docs.trustgrid.io/docs/nodes/">Nodes table&lt;/a>, click the &lt;code>+ Add Agent&lt;/code> button to generate an agent token.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="https://docs.trustgrid.io/img/agent/add-agent-button.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 30%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Add Agent Button
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>When prompted provide a name and choose the Virtual Network the agent will connect to. Then click &lt;code>Add&lt;/code>.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="https://docs.trustgrid.io/img/agent/name-agent.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 85%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Name &amp;#39;agent1&amp;#39; and assigned to &amp;#39;default&amp;#39; virtual network
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>Make sure the &amp;ldquo;Ubuntu Jammy&amp;rdquo; tab is selected and then click the copy button to copy the install command to your clipboard.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="https://docs.trustgrid.io/img/agent/ubuntu-install-command.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 85%;">
&lt;/figure>
&lt;div class="alert alert-warning" role="alert">
The agent token and install command are only visible on this panel. Once closed it is not retrievable. Either keep the panel open until you&amp;rsquo;ve completed the below steps or copy the token to a secure location
&lt;/div>
&lt;/li>
&lt;li>Login to your Ubuntu instances as a user with sudo permissions.&lt;/li>
&lt;li>Paste the command from your clipboard and hit enter. The install process will run automatically.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="https://docs.trustgrid.io/img/agent/tg-agent-install.gif" alt="Terminal window showing the Trustgrid agent being installed" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 95%;">
&lt;/figure>
&lt;/li>
&lt;li>After it completes you can return to the portal and close the Add Agent panel. You should see the new agent listed in the Nodes table and online.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="https://docs.trustgrid.io/img/agent/agent-online.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 65%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
agent1 shows as online
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h4 id="determine-agent1-ip-address">Determine agent1 IP address&lt;/h4>
&lt;p>As part of registration, each agent is automatically assigned an IP address on the Trustgrid virtual network. We will need this IP address to confirm communication between the agents in later steps.&lt;/p>
&lt;ol>
&lt;li>From the console of agent1, run the below command:&lt;div class="codeblock-container">
&lt;pre>&lt;code>ip address show dev trustgrid0&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>Look for an IP address starting with 100.64.&lt;/li>
&lt;/ol>
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent1-ip.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Console showing the Trustgrid IP address of 100.64.0.1
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="install-second-agent">Install Second Agent&lt;/h3>
&lt;p>Repeat the above steps on the second Ubuntu instance to &lt;a href="#install-first-agent">install the Trustgrid agent&lt;/a> with a name like &amp;ldquo;&lt;strong>agent2&lt;/strong>&amp;rdquo; on the same Virtual Network and &lt;a href="#determine-agent1-ip-address">determine agent2&amp;rsquo;s IP address&lt;/a>
This should return a different IP address in the same network.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent2-ip.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Console showing the Trustgrid IP address of 100.64.0.2
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="step-2---confirm-communication">Step 2 - Confirm communication&lt;/h2>
&lt;p>From &lt;code>agent2&lt;/code> run the below command to ping &lt;code>agent1&lt;/code> using its Trustgrid IP address:
&lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 4 100.64.0.1&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;div class="alert alert-info" role="alert">
The examples above and below assume the agents received the first two addresses in the pool. If the agents were assigned different IP addresses adjust the below commands accordingly.
&lt;/div>
This should generate 4 ping requests with successful responses showing traffic is traversing the Trustgrid network between the two agents.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="ping-agent1.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 60%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Successful ping from agent2 to agent1
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Similarly, from the console of &lt;code>agent1&lt;/code> run the below command to ping &lt;code>agent2&lt;/code>:
&lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 4 100.64.0.2&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="ping-agent2.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 60%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Successful ping from agent1 to agent2
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="step-3---view-flow-logs">Step 3 - View Flow Logs&lt;/h2>
&lt;p>&lt;a href="https://docs.trustgrid.io/help-center/flow-logs/">Flow logs&lt;/a> provide visibility Trustgrid provides into the traffic passing through agents. They show details of every connection including source, destination, protocols, and more.&lt;/p>
&lt;h3 id="view-on-overview">View on Overview&lt;/h3>
&lt;p>The flow logs for agents are shown on the Overview page for each node beneath the stats.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent-icmp-flow-logs.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
ICMP flow logs for agents 1 and 2
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h3 id="view-flow-logs-table">View Flow Logs Table&lt;/h3>
&lt;p>Additionally, the flow logs table is available under History &amp;gt; Flow Logs.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="flow-log-nav.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 30%;">
&lt;/figure>
&lt;/p>
&lt;p>This table includes the ability to perform &lt;a href="https://docs.trustgrid.io/help-center/flow-logs/#advanced-search">advanced searches&lt;/a> and &lt;a href="https://docs.trustgrid.io/help-center/flow-logs/#exporting-flow-logs-to-csv">export&lt;/a> the flow logs to csv.&lt;/p>
&lt;p>In the below screenshot, the TCP flow log from the &lt;a href="#step-4---optional-generate-web-traffic">generated web traffic&lt;/a> steps is visible including TCP flags. TCP Flags can be very useful in troubleshooting failed connections in the past. If only the SYN flag is shown this indicates the destination ip:port did not respond to complete the TCP handshake.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent2-flow-logs.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Flow logs table with search for agent2
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>Now that you have the basic agent setup complete and have seen traffic passing between the agents you can proceed to test &lt;a href="https://docs.trustgrid.io/getting-started/trial/access-policies/">using Access Policies&lt;/a> to control what traffic is allowed on the network.&lt;/p></description></item><item><title>Getting-Started: Implement Access Policy Restrictions</title><link>https://docs.trustgrid.io/getting-started/trial/access-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.trustgrid.io/getting-started/trial/access-policies/</guid><description>
&lt;p>When designing a network from a zero-trust, least-privilege mindset, all agents and appliances should restrict access as much as possible both to each other and their adjacent network resources. Trustgrid allows for granular control over what traffic is permitted across the virtual network using &lt;a href="https://docs.trustgrid.io/docs/domain/virtual-networks/access-policy/">access policies&lt;/a>. The default virtual network was created with an &amp;ldquo;Allow All&amp;rdquo; policy to facilitate initial connectivity during the trial period.&lt;/p>
&lt;p>In this section, we will update the policy to restrict traffic between the two agents.&lt;/p>
&lt;h2 id="high-level-steps">High-Level Steps&lt;/h2>
&lt;ul>
&lt;li>Generate TCP traffic between the agents&lt;/li>
&lt;li>Create an access policy to deny all traffic and verify traffic is blocked&lt;/li>
&lt;li>Create additional policies to allow specific traffic&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Two agents installed and confirmed communicating (pingable) on the default virtual network as &lt;a href="https://docs.trustgrid.io/getting-started/trial/base-setup/">set up in previous tutorials&lt;/a>&lt;/li>
&lt;li>Netcat ( &lt;code>nc&lt;/code> ) installed on both agents to generate and capture traffic. This utility is commonly installed by default in most Linux OSes, but may need to be installed manually.&lt;/li>
&lt;/ul>
&lt;h2 id="step-1---generate-traffic">Step 1 - Generate Traffic&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Note: The below assumes &lt;strong>agent1&lt;/strong> was assigned &lt;code>100.64.0.1&lt;/code> and &lt;strong>agent2&lt;/strong> was assigned &lt;code>100.64.0.2&lt;/code>. If your agents were assigned different IP addresses update the below commands accordingly.
&lt;/div>
&lt;h3 id="start-tcp-netcat-listener-on-agent1">Start TCP Netcat listener on agent1&lt;/h3>
&lt;p>Netcat (or &lt;code>nc&lt;/code>) is a versatile networking tool that can function as a client to send data to other hosts or as a listener to receive data on a specified port. We will first configure it to listen on agent1.&lt;/p>
&lt;ol>
&lt;li>Gain console access to &lt;strong>agent1&lt;/strong>.&lt;/li>
&lt;li>Run the below command to start netcat listening on TCP port 5000. &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -k -l 5000&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>Leave this terminal open as netcat will continue listening in the background and will display any data sent to port 5000.&lt;/li>
&lt;/ol>
&lt;h3 id="send-traffic-from-agent2">Send Traffic from agent2&lt;/h3>
&lt;ol>
&lt;li>Gain console access to &lt;strong>agent2&lt;/strong>.&lt;/li>
&lt;li>Run the below command to send a message from &lt;strong>agent2&lt;/strong> to &lt;strong>agent1&lt;/strong>. &lt;div class="codeblock-container">
&lt;pre>&lt;code> echo "Hello from $(hostname)!" | nc -q 1 100.64.0.1 5000 &lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>After about a second you will be returned to the command prompt for &lt;strong>agent2&lt;/strong> with no output.&lt;/li>
&lt;li>Return to the console for &lt;strong>agent1&lt;/strong> and you should see a message like &lt;code>Hello from agent2!&lt;/code>
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-hello.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 50%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Netcat listener output on agent1
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h3 id="stop-tcp-netcat-listener-on-agent1">Stop TCP Netcat listener on agent1&lt;/h3>
&lt;ol>
&lt;li>Return to the console for &lt;strong>agent1&lt;/strong> and press Ctrl-C to terminate the netcat listener that was started in Step 1.&lt;/li>
&lt;/ol>
&lt;h3 id="confirm-ping-icmp-traffic">Confirm Ping (ICMP) Traffic&lt;/h3>
&lt;p>Before implementing access policy restrictions, confirm ping (ICMP) traffic is still allowed between the agents:&lt;/p>
&lt;ol>
&lt;li>On &lt;strong>agent1&lt;/strong> run: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 3 100.64.0.2&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>On &lt;strong>agent2&lt;/strong> run: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 3 100.64.0.1&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
You should see ping responses from the other agent, confirming ICMP traffic is still permitted by the default &amp;ldquo;Allow All&amp;rdquo; policy.&lt;/li>
&lt;/ol>
&lt;h2 id="step-2---deny-all-traffic">Step 2 - Deny All Traffic&lt;/h2>
&lt;h3 id="update-existing-access-policy">Update Existing Access Policy&lt;/h3>
&lt;p>Now we will update the default policy to deny all traffic and confirm TCP communication is blocked:&lt;/p>
&lt;ol>
&lt;li>In the Trustgrid portal, return to the home page and select the Virtual Networks option from the left navigation menu.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="home-vnet.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 40%;">
&lt;/figure>
&lt;/li>
&lt;li>From the Virtual Networks table, select the &lt;strong>default&lt;/strong> virtual network.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="default-vnet.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 50%;">
&lt;/figure>
&lt;/li>
&lt;li>Click the Access Policies option from the navigation menu on the left.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="vnet-acl-menu.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 50%;">
&lt;/figure>
&lt;/li>
&lt;li>The existing &amp;ldquo;Allow All&amp;rdquo; policy will be displayed. Click the edit button on the far right.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="default-acl-allow-all.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;/figure>
&lt;/li>
&lt;li>Change the policy action to &amp;ldquo;Reject&amp;rdquo;, update the description to say &amp;lsquo;deny all traffic&amp;rsquo; and click Save.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="default-acl-reject-all.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 70%;">
&lt;/figure>
&lt;ol>
&lt;li>In addition to the &amp;ldquo;Allow&amp;rdquo; and &amp;ldquo;Reject&amp;rdquo; actions is the option to &amp;ldquo;Drop&amp;rdquo;. This will also deny traffic but without sending a response back to the source. Reject is preferred &lt;strong>for the trial&lt;/strong> because it provides feedback that traffic was blocked. This may not be the desired setting in a production environment.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>All changes at the virtual network level must be reviewed and applied before being broadcast to nodes. Click the Review Changes from the left navigation menu. You will see the previous and new settings. Click the &amp;ldquo;Apply Changes&amp;rdquo; button and then confirm when prompted.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="acl-deny-apply.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h3 id="confirm-icmp-traffic-is-blocked">Confirm ICMP Traffic is Blocked&lt;/h3>
&lt;ol>
&lt;li>On &lt;strong>agent1&lt;/strong> run: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 3 100.64.0.2&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>On &lt;strong>agent2&lt;/strong> run: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 3 100.64.0.1&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
You should see ping responses from the other agents are now filtered.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="icmp-filtered.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 75%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Terminal showing ICMP filtered responses
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h3 id="confirm-tcp-traffic-is-blocked">Confirm TCP Traffic is Blocked&lt;/h3>
&lt;ol>
&lt;li>On &lt;strong>agent1&lt;/strong>, run the following command to start netcat listening on TCP port 5000. &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -k -l 5000&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>On &lt;strong>agent2&lt;/strong>, run the following command to test connectivity to port 5000 on agent1: &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -vz 100.64.0.1 5000&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
You should see a &amp;ldquo;Connection refused&amp;rdquo; message indicating the TCP connection was blocked by the deny all policy.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-refused.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 75%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Netcat output showing &amp;#39;Connection refused&amp;#39;
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;li>Return to &lt;strong>agent1&lt;/strong> and enter Ctrl+C to terminate the netcat listener.&lt;/li>
&lt;/ol>
&lt;h2 id="step-3---allow-desired-traffic">Step 3 - Allow Desired Traffic&lt;/h2>
&lt;p>Now that we&amp;rsquo;ve confirmed the virtual network is blocking traffic we can add rules to allow the specific traffic we want.&lt;/p>
&lt;h3 id="allow-all-icmp">Allow all ICMP&lt;/h3>
&lt;p>First, we will add a rule to allow ICMP between all addresses on the network. This is frequently used as a troubleshooting tool with very little risk.&lt;/p>
&lt;ol>
&lt;li>In the Trustgrid portal, navigate to the default virtual network&amp;rsquo;s access policies page.&lt;/li>
&lt;li>Click the &amp;ldquo;Add Rule&amp;rdquo; button.&lt;/li>
&lt;li>Configure the rule as below:
&lt;ol>
&lt;li>Action: Allow&lt;/li>
&lt;li>Protocol: ICMP&lt;/li>
&lt;li>Source: 0.0.0.0/0&lt;/li>
&lt;li>Destination: 0.0.0.0/0&lt;/li>
&lt;li>Line number: 90 (It is important that the rule number is lower than that on the default deny all policy, 100, so that it is evaluated first)&lt;/li>
&lt;li>Description: Allow all ICMP
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="allow-all-icmp.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 70%;">
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Click Save&lt;/li>
&lt;li>Select the Review Changes panel, click Apply Changes and, then confirm.&lt;/li>
&lt;/ol>
&lt;h3 id="confirm-icmp-allowed">Confirm ICMP Allowed&lt;/h3>
&lt;ol>
&lt;li>On &lt;strong>agent1&lt;/strong> run: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 3 100.64.0.2&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>On &lt;strong>agent2&lt;/strong> run: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 3 100.64.0.1&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
You should see ping responses from the other agent, confirming ICMP traffic is still permitted by the new policy.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="icmp-allowed.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Successful ping from agent2 to agent1
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h3 id="allow-specific-tcp">Allow Specific TCP&lt;/h3>
&lt;p>Next, we will add a rule to allow more specific TCP traffic. Specifically, we will allow &lt;strong>agent2&lt;/strong> to connect to port 5000 on &lt;strong>agent1&lt;/strong>.&lt;/p>
&lt;ol>
&lt;li>In the Trustgrid portal, navigate to the default virtual network&amp;rsquo;s access policies page.&lt;/li>
&lt;li>Click the &amp;ldquo;Add Rule&amp;rdquo; button.&lt;/li>
&lt;li>Configure the rule as below:
&lt;ol>
&lt;li>Action: Allow&lt;/li>
&lt;li>Protocol: TCP&lt;/li>
&lt;li>Source: 100.64.0.2/32&lt;/li>
&lt;li>Destination: 100.64.0.1/32&lt;/li>
&lt;li>Port Range: 5000&lt;/li>
&lt;li>Line number: 80 (It is important that the rule number is lower than that on the default deny all policy, 100, so that it is evaluated first)&lt;/li>
&lt;li>Description: Allow TCP 5000 on Agent1
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-5000-allow.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 70%;">
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Click Save&lt;/li>
&lt;li>Select the Review Changes panel, click Apply Changes and, then confirm.&lt;/li>
&lt;/ol>
&lt;h3 id="confirm-tcp-5000-allowed">Confirm TCP 5000 Allowed&lt;/h3>
&lt;p>Now, we will confirm the specific TCP rule is allowing traffic as expected:&lt;/p>
&lt;ol>
&lt;li>On &lt;strong>agent1&lt;/strong>, run the following command to start netcat listening on TCP port 5000. &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -k -l 5000&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>On &lt;strong>agent2&lt;/strong>, run the following command to test connectivity to port 5000 on agent1: &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -vz 100.64.0.1 5000&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-5000-success.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 75%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Successful connection to port 5000 on agent1
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;p>But, we also want to make sure other TCP traffic isn&amp;rsquo;t allowed.&lt;/p>
&lt;ol>
&lt;li>On &lt;strong>agent1&lt;/strong> enter Ctrl+C to terminate the netcat listener. Then enter the command: &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -k -l 5001&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;div class="alert alert-info" role="alert">
Note that the port has changed to 5001
&lt;/div>
&lt;/li>
&lt;li>On &lt;strong>agent2&lt;/strong>, run the following command to test connectivity to port 5000 on agent1: &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -vz 100.64.0.1 5001&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-5001-refused.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 75%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Connection refused on port 5001
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>So far we&amp;rsquo;ve only seen traffic passing between two agent IPs. In the next tutorial, you will see how you can &lt;a href="https://docs.trustgrid.io/getting-started/trial/subnet-routing/">route traffic to adjacent network devices&lt;/a>.&lt;/p></description></item><item><title>Getting-Started: Configure Subnet Routing</title><link>https://docs.trustgrid.io/getting-started/trial/subnet-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.trustgrid.io/getting-started/trial/subnet-routing/</guid><description>
&lt;p>The tutorial up to this point only demonstrated the ability to send traffic between the IP addresses assigned to the trustgrid0 interfaces on each agent. However, it&amp;rsquo;s quite likely that security and operational constraints will prevent the Trustgrid agent from being installed directly on the target server. Instead, the agent will need to route traffic destined for the target server&amp;rsquo;s local network.&lt;/p>
&lt;p>In this section, we will configure an agent to route traffic destined for another network through the Trustgrid virtual network. To avoid assumptions about the networks your agents are deployed in, we will use a loopback interface to simulate an adjacent network. But the steps shown here would apply equally if routing between real physical interfaces.&lt;/p>
&lt;h2 id="high-level-goals">High-Level Goals&lt;/h2>
&lt;ul>
&lt;li>Create a loopback interface to simulate an adjacent network&lt;/li>
&lt;li>Configure a route to send traffic destined for the adjacent network subnet through a Trustgrid agent&lt;/li>
&lt;li>Configure the agent to forward the virtual network traffic to the real subnet&lt;/li>
&lt;li>Configure a NAT to obscure the real target address&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Two agents installed and confirmed communicating (pingable) on the default virtual network as set up in previous tutorials
&lt;ul>
&lt;li>&lt;a href="https://docs.trustgrid.io/getting-started/trial/base-setup/">Initial Setup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.trustgrid.io/getting-started/trial/access-policies/">Access Policies&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="step-1---configure-loopback-interface-and-start-server">Step 1 - Configure Loopback Interface and Start Server&lt;/h2>
&lt;p>On &lt;strong>agent1&lt;/strong> we will create a loopback interface and assign it an IP address from another subnet. This will simulate an adjacent network that the agent needs to route traffic to.
&lt;div class="alert alert-info" role="alert">
The assigned IP address &lt;code>172.31.255.1/32&lt;/code> can be replaced by another IP if it conflicts with an IP or route on either of the agents.
&lt;/div>
&lt;/p>
&lt;ol>
&lt;li>Gain console access to &lt;strong>agent1&lt;/strong>.&lt;/li>
&lt;li>Run the below commands to add a loopback interface called &lt;code>lo2&lt;/code> and assign an IP address &lt;code>172.16.255.1&lt;/code>. &lt;div class="codeblock-container">
&lt;pre>&lt;code>sudo ip link add name lo2 type dummy
sudo ip addr add 172.31.255.1/32 dev lo2
sudo ip link set lo2 up
&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>Start a netcat listener on the lo2 interface using the below commands: &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -k -l -p 5000 -s 172.31.255.1&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;/ol>
&lt;h2 id="step-2---configure-access-to-an-adjacent-network">Step 2 - Configure access to an adjacent network&lt;/h2>
&lt;h3 id="configure-ip-forwarding-on-agent1">Configure IP Forwarding on agent1&lt;/h3>
&lt;p>The first step is to configure &lt;strong>agent1&lt;/strong> to forward traffic to networks other than its own trustgrid0 interface IP. By default, the Linux operating system will only accept packets on an interface if the destination IP is assigned to that interface. Enabling IP forwarding allows the OS to manage packets destined for other IPs and networks.&lt;/p>
&lt;ol>
&lt;li>In the Trustgrid portal Nodes page select &lt;strong>agent1&lt;/strong>&lt;/li>
&lt;li>Navigate to the VPN panel
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent1-vpn-nav.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 40%;">
&lt;/figure>
&lt;/li>
&lt;li>Click the box to &amp;ldquo;Enable Forwarding&amp;rdquo;
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent1-enable-forwarding.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 40%;">
&lt;/figure>
&lt;/li>
&lt;li>Click &amp;ldquo;Save&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;h3 id="configure-virtual-network-route-to-agent1">Configure Virtual Network Route to agent1&lt;/h3>
&lt;p>Now that agent1 has an &amp;ldquo;adjacent network&amp;rdquo; of interest, the virtual network needs to be told that packets destined for this network should be routed to agent1. We will do this with a &lt;a href="https://docs.trustgrid.io/docs/domain/virtual-networks/routes/">virtual network route.&lt;/a>&lt;/p>
&lt;ol>
&lt;li>In the Trustgrid portal, navigate to the &amp;ldquo;Virtual Network&amp;rdquo; page and select the &lt;strong>default&lt;/strong> network.&lt;/li>
&lt;li>On the Routes panel click the &amp;ldquo;Add Route&amp;rdquo; button.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="add-routes-button.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 60%;">
&lt;/figure>
&lt;/li>
&lt;li>Configure the route with the following settings
&lt;ol>
&lt;li>Destination: Node: agent1&lt;/li>
&lt;li>Destination CIDR: &lt;code>172.31.255.1/32&lt;/code>&lt;/li>
&lt;li>Metric: &lt;code>1&lt;/code>&lt;/li>
&lt;li>Description: agent1 loopback
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent1-route.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 95%;">
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Click Save at the top of the page.&lt;/li>
&lt;li>Navigate to the Review Changes page and click Apply Changes. Confirm with Yes when prompted.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="agent1-route-confirm.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h2 id="configure-os-route-on-agent2">Configure OS Route on agent2&lt;/h2>
&lt;p>Next, we need to tell &lt;strong>agent2&lt;/strong> to use the trustgrid0 interface to route traffic destined for the adjacent network. This is done by adding a local route in the operating systems that will forward traffic for the target IP, 172.31.255.1, via the trustgrid0 interface and through the virtual network tunnel.&lt;/p>
&lt;ol>
&lt;li>Gain console access to &lt;strong>agent2&lt;/strong>&lt;/li>
&lt;li>Run the command: &lt;div class="codeblock-container">
&lt;pre>&lt;code>sudo ip route add 172.31.255.1/32 dev trustgrid0&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>You can confirm this is effective with the command: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ip route&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>You should see the route listed as shown below:
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="os-route.png" alt="ip route output with the last line showing &amp;#39;172.31.255.1 dev trustgrid0 scope link metric 1&amp;#39;" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 80%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Route for 172.31.255.1 on the trustgrid0 interface
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h2 id="confirm-connectivity">Confirm Connectivity&lt;/h2>
&lt;h3 id="test-icmp-connectivity">Test ICMP Connectivity&lt;/h3>
&lt;p>We can now test ICMP connectivity using &lt;code>ping&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>On &lt;strong>agent2&lt;/strong>, run the command: &lt;div class="codeblock-container">
&lt;pre>&lt;code>ping -c 3 172.31.255.1&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
You should see replies from the IP on agent1&amp;rsquo;s lo2 interface.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="routed-icmp-success.png" alt="successful pings to 172.31.255.1" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 80%;">
&lt;figcaption style="text-align: center; margin-top: 0.5rem; font-weight: lighter;">
Successfully routed pings
&lt;/figcaption>
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;p>This confirms that traffic destined for the adjacent network IP is:&lt;/p>
&lt;ol>
&lt;li>Routed by the OS on agent2 out the trustgrid0 interface&lt;/li>
&lt;li>Flows over the virtual network to agent1&lt;/li>
&lt;li>Is received and forwarded by agent1 to the lo2 interface&lt;/li>
&lt;li>Replies return over the same path&lt;/li>
&lt;/ol>
&lt;h3 id="test-tcp-connectivity">Test TCP Connectivity&lt;/h3>
&lt;p>Similarly, we can verify TCP traffic is being routed and forwarded as expected. Similar to the &lt;a href="https://docs.trustgrid.io/getting-started/trial/access-policies/">access policy tutorial&lt;/a>, we will test connectivity to the netcat listener but in this case, we will bind the listener to the loopback interface IP.&lt;/p>
&lt;h4 id="update-access-policies">Update Access Policies&lt;/h4>
&lt;p>In the &lt;a href="https://docs.trustgrid.io/getting-started/trial/access-policies/">access policy tutorial&lt;/a> we specified a rule that only allowed TCP access to port 5000 when the destination IP was agent1&amp;rsquo;s trustgrid0 IP, &lt;code>100.64.0.1&lt;/code>. Since we are now routing traffic to agent1&amp;rsquo;s loopback IP &lt;code>172.31.255.1&lt;/code> instead, we need to update the policy to allow access to that IP/port instead.&lt;/p>
&lt;ol>
&lt;li>In the Trustgrid portal navigate to the Virtual Networks page and select the default network.&lt;/li>
&lt;li>Click the edit icon to the right of the TCP 5000 rule previously created.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="edit-acl.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 95%;">
&lt;/figure>
&lt;/li>
&lt;li>Change the Destination to &lt;code>172.31.255.1/32&lt;/code> and click Save.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-acl-change.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 70%;">
&lt;/figure>
&lt;/li>
&lt;li>Confirm the rule change was applied by navigating to the Review Changes page and clicking Apply Changes. Confirm with Yes when prompted.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-acl-change-review.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 90%;">
&lt;/figure>
&lt;/li>
&lt;/ol>
&lt;h4 id="confirm-tcp-connectivity">Confirm TCP Connectivity&lt;/h4>
&lt;p>Now we can start our listener and test connectivity.&lt;/p>
&lt;ol>
&lt;li>On &lt;strong>agent1&lt;/strong> run the command: &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -k -l -p 5000 -s 172.31.255.1&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>On &lt;strong>agent2&lt;/strong> and confirm we can connect to port 5000 on agent1&amp;rsquo;s loopback ip with the command: &lt;div class="codeblock-container">
&lt;pre>&lt;code>nc -vz -w 1 172.31.255.1 5000&lt;/code>&lt;/pre>
&lt;button onclick="copyToClipboard(this)">Copy&lt;/button>
&lt;/div>
&lt;script>
function copyToClipboard(element) {
var text = element.previousElementSibling.textContent;
navigator.clipboard.writeText(text).then(function() {
console.log('Text copied to clipboard');
}).catch(function(err) {
console.error('Could not copy text: ', err);
});
}
&lt;/script>
&lt;style>
.codeblock-container {
position: relative;
display: flex;
align-items: center;
}
.codeblock-container pre {
margin: 0;
font-family: monospace;
background-color: #f4f4f4;
padding: 10px;
border-radius: 5px;
flex-grow: 1;
}
.codeblock-container button {
margin-left: 10px;
padding: 5px 10px;
border: none;
border-radius: 5px;
cursor: pointer;
}
&lt;/style>
&lt;/li>
&lt;li>You should see a successful connection message like below.
&lt;script src="https://docs.trustgrid.io/js/fullscreen.js">&lt;/script>
&lt;figure class="centered-image">
&lt;img src="tcp-connect-success.png" alt="" onclick="toggleImageSize(this)" style="display: block; margin-left: auto; margin-right: auto; width: 70%;">
&lt;/figure>
&lt;/li>
&lt;/ol></description></item></channel></rss>